
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSBHASKARA COMMA DIVIDE EQUALS EXP LPAREN MAJOR MINOR MINUS MYRNA NAME NUMBER PLUS POW RPAREN SQRT TIMESstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MINOR expression\n                  | expression MINOR EQUALS expression\n                  | expression MAJOR expression\n                  | expression MAJOR EQUALS expression\n                  | expression EQUALS EQUALS expression\n                  | expression EXP expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : POW LPAREN expression COMMA expression RPARENexpression : SQRT LPAREN expression RPARENexpression : MYRNA LPAREN expression RPARENexpression : BHASKARA LPAREN expression COMMA expression COMMA expression RPAREN'
    
_lr_action_items = {'NAME':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[2,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINUS':([0,2,3,4,5,6,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[4,-16,13,4,4,-15,4,4,4,4,4,4,4,4,-13,-16,13,4,4,4,4,13,-3,-4,-5,-6,13,4,4,13,4,13,-14,13,13,13,13,13,13,13,4,-18,-19,4,13,13,-17,4,13,-20,]),'LPAREN':([0,4,5,7,8,9,10,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[5,5,5,23,24,25,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'POW':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'SQRT':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'MYRNA':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'BHASKARA':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,6,20,21,27,28,29,30,31,32,35,37,38,43,44,45,47,48,52,55,],[0,-16,-2,-15,-13,-16,-1,-3,-4,-5,-6,-7,-9,-12,-14,-8,-11,-10,-18,-19,-17,-20,]),'EQUALS':([2,3,6,16,17,18,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[11,17,-15,33,34,36,-13,-16,17,17,-3,-4,-5,-6,17,17,17,-14,17,17,17,17,17,17,17,-18,-19,17,17,-17,17,-20,]),'PLUS':([2,3,6,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[-16,12,-15,-13,-16,12,12,-3,-4,-5,-6,12,12,12,-14,12,12,12,12,12,12,12,-18,-19,12,12,-17,12,-20,]),'TIMES':([2,3,6,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[-16,14,-15,-13,-16,14,14,14,14,-5,-6,14,14,14,-14,14,14,14,14,14,14,14,-18,-19,14,14,-17,14,-20,]),'DIVIDE':([2,3,6,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[-16,15,-15,-13,-16,15,15,15,15,-5,-6,15,15,15,-14,15,15,15,15,15,15,15,-18,-19,15,15,-17,15,-20,]),'MINOR':([2,3,6,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[-16,16,-15,-13,-16,16,16,-3,-4,-5,-6,16,16,16,-14,16,16,16,16,16,16,16,-18,-19,16,16,-17,16,-20,]),'MAJOR':([2,3,6,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[-16,18,-15,-13,-16,18,18,-3,-4,-5,-6,18,18,18,-14,18,18,18,18,18,18,18,-18,-19,18,18,-17,18,-20,]),'EXP':([2,3,6,20,21,22,27,28,29,30,31,32,35,37,38,39,40,41,42,43,44,45,47,48,50,51,52,54,55,],[-16,19,-15,-13,-16,19,19,-3,-4,-5,-6,19,19,19,-14,19,19,19,19,19,19,19,-18,-19,19,19,-17,19,-20,]),'RPAREN':([6,20,21,22,28,29,30,31,32,35,37,38,40,41,43,44,45,47,48,50,52,54,55,],[-15,-13,-16,38,-3,-4,-5,-6,-7,-9,-12,-14,47,48,-8,-11,-10,-18,-19,52,-17,55,-20,]),'COMMA':([6,20,21,28,29,30,31,32,35,37,38,39,42,43,44,45,47,48,51,52,55,],[-15,-13,-16,-3,-4,-5,-6,-7,-9,-12,-14,46,49,-8,-11,-10,-18,-19,53,-17,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,11,12,13,14,15,16,18,19,23,24,25,26,33,34,36,46,49,53,],[3,20,22,27,28,29,30,31,32,35,37,39,40,41,42,43,44,45,50,51,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','grammar.py',16),
  ('statement -> expression','statement',1,'p_statement_expr','grammar.py',21),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','grammar.py',26),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','grammar.py',27),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','grammar.py',28),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','grammar.py',29),
  ('expression -> expression MINOR expression','expression',3,'p_expression_binop','grammar.py',30),
  ('expression -> expression MINOR EQUALS expression','expression',4,'p_expression_binop','grammar.py',31),
  ('expression -> expression MAJOR expression','expression',3,'p_expression_binop','grammar.py',32),
  ('expression -> expression MAJOR EQUALS expression','expression',4,'p_expression_binop','grammar.py',33),
  ('expression -> expression EQUALS EQUALS expression','expression',4,'p_expression_binop','grammar.py',34),
  ('expression -> expression EXP expression','expression',3,'p_expression_binop','grammar.py',35),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','grammar.py',59),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','grammar.py',64),
  ('expression -> NUMBER','expression',1,'p_expression_number','grammar.py',69),
  ('expression -> NAME','expression',1,'p_expression_name','grammar.py',74),
  ('expression -> POW LPAREN expression COMMA expression RPAREN','expression',6,'p_expression_pow','grammar.py',83),
  ('expression -> SQRT LPAREN expression RPAREN','expression',4,'p_expression_sqrt','grammar.py',88),
  ('expression -> MYRNA LPAREN expression RPAREN','expression',4,'p_expression_myrna','grammar.py',93),
  ('expression -> BHASKARA LPAREN expression COMMA expression COMMA expression RPAREN','expression',8,'p_expression_bhaskara','grammar.py',98),
]
